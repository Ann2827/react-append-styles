"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[940],{7406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>m});var s=n(5893),o=n(1151);const r={sidebar_position:2},a="Creating themes",c={id:"doc/usage/theming",title:"Creating themes",description:"Theme configuration",source:"@site/docs/doc/usage/theming.md",sourceDirName:"doc/usage",slug:"/doc/usage/theming",permalink:"/react-append-styles/docs/doc/usage/theming",draft:!1,unlisted:!1,editUrl:"https://github.com/Ann2827/react-append-styles/tree/main/docs/doc/usage/theming.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebarDoc",previous:{title:"Classes",permalink:"/react-append-styles/docs/doc/usage/classes"},next:{title:"Additional functions",permalink:"/react-append-styles/docs/doc/usage/advanced/"}},i={},m=[{value:"Theme configuration",id:"theme-configuration",level:2},{value:"Usage ThemeContext",id:"usage-themecontext",level:2},{value:"<code>makeClasses</code>",id:"makeclasses",level:3},{value:"<code>useTheme</code>",id:"usetheme",level:3},{value:"<code>switchTheme</code>",id:"switchtheme",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"creating-themes",children:"Creating themes"}),"\n",(0,s.jsx)(t.h2,{id:"theme-configuration",children:"Theme configuration"}),"\n",(0,s.jsx)(t.p,{children:"Create a theme/themes configuration file in the src root or in a separate folder with contexts."}),"\n",(0,s.jsxs)(t.p,{children:["Example ",(0,s.jsx)(t.code,{children:"ThemeContext.ts"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { makeTheme } from 'react-append-styles';\n\ntype TTheme = { primaryColor: string };\nconst themes: Record<'main' | 'dark', TTheme> = {\n  main: {\n    primaryColor: '#123456',\n  },\n  dark: {\n    primaryColor: '#000',\n  },\n};\n\n// Set the default theme name: main\nconst ThemeContext = makeTheme<TTheme>('main', themes);\n\nexport default ThemeContext;\n\n"})}),"\n",(0,s.jsx)(t.h2,{id:"usage-themecontext",children:"Usage ThemeContext"}),"\n",(0,s.jsx)(t.h3,{id:"makeclasses",children:(0,s.jsx)(t.code,{children:"makeClasses"})}),"\n",(0,s.jsxs)(t.p,{children:["Identical to using ",(0,s.jsx)(t.a,{href:"classes",children:"\u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"}),", but with theme support."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport ThemeContext from '../ThemeContext.ts';\n\nconst useClasses = ThemeContext.makeClasses<'wrapper', { textColor: string }>(({ theme, textColor }) => ({\n  wrapper: { backgroundColor: theme.primaryColor, color: textColor },\n}));\n\nconst MyComponent: React.FC = () => {\n  const { wrapper } = useClasses({ textColor: 'gray' });\n  \n  return (<div className={wrapper}>MyComponent</div>);\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usetheme",children:(0,s.jsx)(t.code,{children:"useTheme"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the styles object of the selected theme."}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport ThemeContext from '../ThemeContext.ts';\n\nconst MyComponent: React.FC = () => {\n  const theme = ThemeContext.useTheme();\n  \n  return (<div style={{ backgroundColor: theme.primaryColor }}>MyComponent</div>);\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"switchtheme",children:(0,s.jsx)(t.code,{children:"switchTheme"})}),"\n",(0,s.jsx)(t.p,{children:"Switches the topic by name."}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport ThemeContext from '../ThemeContext.ts';\n\nconst MyComponent: React.FC = () => {\n  const enableDark = React.useCallback(() => {\n    ThemeContext.switchTheme('dark');\n  }, []);\n  \n  return (<button onClick={enableDark}>Enable dark</button>);\n};\n"})})]})}function l(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>a});var s=n(7294);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);