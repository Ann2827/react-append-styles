"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[330],{3653:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=n(5893),a=n(1151);const r={sidebar_position:1},l="Classes",i={id:"api/classes",title:"Classes",description:"makeClasses",source:"@site/docs/api/classes.md",sourceDirName:"api",slug:"/api/classes",permalink:"/docs/api/classes",draft:!1,unlisted:!1,editUrl:"https://github.com/Ann2827/react-append-styles/tree/main/docs/api/classes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebarApi",next:{title:"Creating themes",permalink:"/docs/api/theming"}},o={},c=[{value:"<code>makeClasses</code>",id:"makeclasses",level:3},{value:"Example with dynamic props:",id:"example-with-dynamic-props",level:4},{value:"Example with selectors:",id:"example-with-selectors",level:4},{value:"Example with <code>cssVars</code>:",id:"example-with-cssvars",level:4},{value:"Example with <code>@media</code>:",id:"example-with-media",level:4},{value:"<code>useClasses</code>",id:"useclasses",level:3},{value:"Example with dynamic props:",id:"example-with-dynamic-props-1",level:4},{value:"Preventing styles from being mounted",id:"preventing-styles-from-being-mounted",level:4},{value:"Applying and canceling styles",id:"applying-and-canceling-styles",level:4}];function d(e){const s={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(s.h3,{id:"makeclasses",children:(0,t.jsx)(s.code,{children:"makeClasses"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the function-hook ",(0,t.jsx)(s.a,{href:"#useclasses",children:"useClasses"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport { makeClasses } from 'react-append-styles';\n\nconst useClasses = makeClasses({ wrapper: { backgroundColor: 'red' } });\n// There will be a hint of the key (class) names when calling\nconst useClasses = makeClasses<'wrapper' | 'logo'>({ wrapper: { backgroundColor: 'red' }, logo: { color: 'blue' } });\n"})}),"\n",(0,t.jsx)(s.h4,{id:"example-with-dynamic-props",children:"Example with dynamic props:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"const useClasses = makeClasses((props) => ({ wrapper: { backgroundColor: props.color } }));\n// With hint\nconst useClasses = makeClasses<'wrapper', { color: string }>((props) => ({\n  wrapper: { backgroundColor: props.color },\n}));\n"})}),"\n",(0,t.jsx)(s.h4,{id:"example-with-selectors",children:"Example with selectors:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"const useClasses = makeClasses({\n  rootClass: {\n    'button[class*=button]': {\n      borderRadius: '26px',\n    },\n  },\n  linkClass: {\n    right: '0',\n    '&:hover > *': {\n      color: 'red',\n    },\n  }\n});\n"})}),"\n",(0,t.jsxs)(s.h4,{id:"example-with-cssvars",children:["Example with ",(0,t.jsx)(s.code,{children:"cssVars"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"const useClasses = makeClasses({\n  rootClass: {\n    color: 'var(--theme-color)',\n    '--theme-custom-size-headerPadding': '14px 110px',\n  }\n});\n"})}),"\n",(0,t.jsxs)(s.h4,{id:"example-with-media",children:["Example with ",(0,t.jsx)(s.code,{children:"@media"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"const useClasses = makeClasses({\n  rootClass: {\n    alignItems: 'flex-start',\n    '@media all and (max-width: 600px)': {\n      backgroundSize: 'contain',\n    },\n  }\n});\n"})}),"\n",(0,t.jsx)(s.h3,{id:"useclasses",children:(0,t.jsx)(s.code,{children:"useClasses"})}),"\n",(0,t.jsx)(s.p,{children:"It must be called inside the React component."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport { makeClasses } from 'react-append-styles';\n\nconst useClasses = makeClasses<'wrapper'>({ wrapper: { backgroundColor: 'red' } });\n\nconst MyComponent: React.FC = () => {\n  const { wrapper } = useClasses(null);\n  \n  return (<div className={wrapper}>MyComponent</div>);\n};\n"})}),"\n",(0,t.jsx)(s.h4,{id:"example-with-dynamic-props-1",children:"Example with dynamic props:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"const useClasses = makeClasses<'wrapper', { color: string }>((props) => ({\n  wrapper: { backgroundColor: props.color },\n}));\n\nconst MyComponent: React.FC = ({ color = 'red' }) => {\n  const { wrapper } = useClasses({ color });\n\n  return (<div className={wrapper}>MyComponent</div>);\n};\n"})}),"\n",(0,t.jsx)(s.h4,{id:"preventing-styles-from-being-mounted",children:"Preventing styles from being mounted"}),"\n",(0,t.jsxs)(s.p,{children:["In this case, the class name and css styles will be generated.\nThe class will be added to the element, however, the styles will not be appended in ",(0,t.jsx)(s.code,{children:"head"}),". This means that styles are not applied."]}),"\n",(0,t.jsxs)(s.p,{children:["It is recommended to use it if, while ",(0,t.jsx)(s.code,{children:"MyComponent"})," is mounted, this instance does not require custom styles.\n(This will prevent unnecessary DOM manipulation)"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport { makeClasses } from 'react-append-styles';\n\nconst useClasses = makeClasses<'wrapper'>({ wrapper: { backgroundColor: 'red' } });\n\nconst MyComponent: React.FC = ({ withCustomStyles = false }) => {\n  const { wrapper } = useClasses(null, withCustomStyles);\n  \n  return (<div className={wrapper}>MyComponent</div>);\n};\n"})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["The second argument ",(0,t.jsx)(s.code,{children:"useClasses"})," works according to the following principle (in react render conditions):"]}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["if ",(0,t.jsx)(s.code,{children:"true"})," is immediately received, then subsequent changes to the argument are not taken into account. Styles will be added and updated;"]}),"\n",(0,t.jsxs)(s.li,{children:["if ",(0,t.jsx)(s.code,{children:"false"})," is received. Styles will not be added/updated. Wrapper class = undefined;"]}),"\n",(0,t.jsxs)(s.li,{children:["if ",(0,t.jsx)(s.code,{children:"false' is received first, but it has changed to "}),"true'. Styles will start to be added/updated and the wrapper class will change the value from undefined to string after the first change to ",(0,t.jsx)(s.code,{children:"true"}),";"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"true"})," -> ",(0,t.jsx)(s.code,{children:"false"})," -> ... or ",(0,t.jsx)(s.code,{children:"false"})," -> ",(0,t.jsx)(s.strong,{children:"true"})," -> ",(0,t.jsx)(s.code,{children:"false"})," -> ... it doesn't matter. After the first ",(0,t.jsx)(s.strong,{children:"true"})," styles start working and won't stop."]}),"\n"]})]}),"\n",(0,t.jsx)(s.h4,{id:"applying-and-canceling-styles",children:"Applying and canceling styles"}),"\n",(0,t.jsxs)(s.p,{children:["If while the ",(0,t.jsx)(s.code,{children:"MyComponent"})," is mounted, the need of this instance for custom styles will change, then it is better to use this variant:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import React from 'react';\nimport { makeClasses } from 'react-append-styles';\n\nconst useClasses = makeClasses<'wrapper'>({ wrapper: { backgroundColor: 'red' } });\n\nconst MyComponent: React.FC = ({ withCustomStyles = false }) => {\n  const { wrapper } = useClasses(null);\n\n  return (<div className={withCustomStyles ? wrapper : undefined}>MyComponent</div>);\n};\n"})})]})}function p(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>l});var t=n(7294);const a={},r=t.createContext(a);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);